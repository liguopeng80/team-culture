#+OPTIONS: ^:nil
#+OPTIONS: num:nil
#+OPTIONS: toc:2
#+TITLE: 内部培训记录（产品、技术、管理、战略）

* tech seminar - Tech Lead 的发现和培养 [2016-06-26 Sun]                        :seminar:
** Tech Lead 的职责
   1. 某个独立工作方向的负责人
      - 带领小型团队 1 - 15 人交付软件开发、测试、研究成果
        
   2. 独立评估和选择工程技术标准、开发过程
   3. 独立判断并使用标准开发和测试过程
   4. 从下而上建立适合团队的工程实践
      
   5. 独立完成具体的工作目标（比如数万行代码、中等复杂度的模块或服务）
   6. 带领团队快速、高效完成开发任务，对结果和质量负责
      
   7. 在应用公司标准的开发流程规范过程中
      - 具有独立的批判性思维能力，并自下而上的推动流程改进
        
   8. 积极主动：
      - 新思维、新方法
      - 主动发现和解决问题
        
   9. 领导和培养初级、中级工程师
      
** Tech Lead 应有的特质
   1. 关注细节、关注愿景
      - 识别问题，暴露风险
      - 探索提升工作成果的方法并执行
       
   2. 注重协作：
      - 能够从其他人搜集不同（更专业的）意见和想法
      - 能听取各种正向、负向的反馈
         
   3. 领导能力
      - 高效组织和召开正式、非正式的会议
        
   4. 性格和能力
   5. 对结果负责
   6. 技术不是全部             
       
* tech seminar - Lead Yourself  [2015-07-31 Fri]                                :seminar:
  1. 如果在团队中只能锻炼一种能力，你希望是什么？
     - 明白做事情的流程，分清任务优先级，并且专注工作八小时
       
  2. 每个人都是自己的 Lead，是自己所代表的方向的『负责人』；
  3. 把流程看作是一个整理、回顾的机会；      
  4. To lead others, learn to lead yourself first.

* tech seminar - 再说要事先行 [2015-06-26 Fri]                                  :seminar:
  1. 可以工作的方向几乎无限多，需要思考的方向无限多
     - 饭要一口一口吃，事要一个一个做
     - 抬头看天不要忘了低头看地
     - Vison 是由大量细节支撑出来的
     - 小公司扯愿景最大的风险是忘了脚踏实地
       
  2. 工作内容是分层次的
     - 方向不明的情况下，沉迷于细节是浪费时间（比如各种早期优化、美化）；
     - 没有方向的时候可以做技术积累、可以做以后无论如何一定要做的那些工作；
        
  3. 工作中投入精力的方向要对着自己的阶段性目标；
     - 功能要对着产品的愿景（战略目标）
        
  4. 项目方向 VS. 自己的爱好
     - 商业性项目必须是结果导向
     - 个人喜好和项目方向不匹配是双重浪费时间
        
* tech seminar - 良好的交流心态 [2015-06-12 Fri]                                :seminar:
  1. 没有愚蠢的问题，只有愚蠢的答案 —— 尊重别人的观点
  2. 对事不对人，禁止人身攻击、智商歧视、贴标签、扣帽子、脏话连篇...
  3. 认真听别人说；不要打断；在自己说完之后，要给对方足够的时间思考；要停下来等对方发言
     
  4. 尝试理解对方。在不理解对方的思路和想法之前：
     - 无论怎么重复、强调自己的观点都没有用
     - 提高嗓门不解决问题
     - 只说结论不解释原因，是标准的耍流氓
     - 不要揣测对方的想法和意图；虚心、耐心地听对方解释
       
  5. 发现陷入僵局后，应该冷静并停止争论 —— 持续互砍纯属浪费时间      
     - 认真、耐心的向对方描述自己的想法（自己的原因而不是方案）；
     - 认真、耐心的询问对方的想法（对方方案背后的原因）；
        
  6. 群体讨论
     - 每次只有一个人发言，一个人说话其他人不要插嘴；
     - 讨论结束要有至少一个人总结各方的观点、以及最终的讨论结果；
     - 所有的会议都应该有人写 meeting minutes；
       
  7. 有想法就有办法，不要不过大脑就说不可能、做不到；

* tech seminar - scrum and sprint management, tech lead [2014-12-01 Mon]        :training:
  1. 长期目标和短期目标，优先级和依赖性；
  2. 暴露风险，承认失败。
  3. 对于不理解的问题，不管有什么样的疑惑，说出来。
     
  4. 多问几次为什么；有争执和疑问的根源在于不同的人对需求、对设计等有不同的假设；说出来你的假设。（5-why）
      
     1. 某个『设计』的目标是什么？为什么会有这样的目标？设计对应哪方面的需求假
        设（性能、兼容性、扩展性、第三方扩展、团队技术背景、公司技术平台要求、
        具体的功能需求）？有没有替代方案？别的替代方案有哪些假设？为什么别的替
        代方案不可取？设计对应的需求假设是不是成立？这些假设有没有替换方案？
         
     2. 问题的现象是什么（位置、操作步骤、结果）？问题的证据有哪些（日志、服务
        器、数据库记录）？理论上应该有什么样的结果？可能是什么原因导致的？有没
        有更深层次的原因？解决方案是什么？问题如何重现？方案如何验证？
         
     3. 为什么会发生？从“制造”的角度。
     4. 为什么没有发现？从“检验”的角度。
     5. 为什么没有从系统上预防事故？从“体系”或“流程”的角度。
         
  5. 动态调整优先级 vs. 要事先行；
  6. 质量由每个人负责，进度也由每个人负责。
      
  7. 一个成功的开发组需要各种各样的角色；主动承担自己能做的，放弃自己不能做的
     1. 需求分析、系统分析、设计、实现、集成、测试
     2. 环境准备、搭建、部署、文档、外部协商（软硬件资源、系统依赖）等
     3. 跨团度的技术协作、支持（依赖对方、被对方依赖）、联调、协商
     4. 保持团队的工作目标和项目目标一致，拆分长期目标到阶段性目标
     5. 进度评估、工作量估算、任务分配、进度跟踪、任务调整
     6. 风险监控（技术风险、进度控制、质量控制）：发现、预警、处理
     7. 整体进度跟踪、汇报、工作量统计、向管理层透明化展示 team 的工作状态
     8. 非技术、项目相关的管理、支持等工作
         
  8. 保留已有的最佳实践；逐步改进；不要在低水平的泥坑里挣扎，也不要步子太大...
     养成一种习惯和文化很难，但放弃很容易。
     - daily deployment
     - code freeze
     - close sprint on deadline
        
  9. 项目管理不是为了让每个人都开心；而是为了尽量让多数人开心...
     
  10. 团队的使命感和自豪感在不断的成功中积累，在连续的失败中败退。
      
  11. 实践手段
      - Sprint 必须有明确的目标
      - 必须有明确的『时间』边界；绝不允许顺延；成功就是成功，失败就是失败。
      - 要透彻理解、掌握自己的开发任务，并尽可能让其他相关人员熟悉和掌握
      - 核心要点必须文档化
      - 对整体项目的大目标负责；同时对当前 sprint 的小目标负责
